//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Input/ForkliftInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ForkliftInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ForkliftInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ForkliftInput"",
    ""maps"": [
        {
            ""name"": ""Forklift"",
            ""id"": ""ff9fbd41-dee9-4b2e-b98e-0f8d87f04b3f"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""38cdf26c-1055-48c4-8a2b-8a9196a168cb"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Turn"",
                    ""type"": ""Value"",
                    ""id"": ""dbdf9ce7-c6ae-483e-b17a-6ea3c242ff6a"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RaiseLift"",
                    ""type"": ""Button"",
                    ""id"": ""151fb230-2c84-4289-bf6c-e2daa1685f47"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LowerLift"",
                    ""type"": ""Button"",
                    ""id"": ""6cb091e1-06c2-438d-814e-9dd405bc0c9e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Brake"",
                    ""type"": ""Button"",
                    ""id"": ""422875bf-d44a-4d4a-8ea7-632a9699c581"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LookInput"",
                    ""type"": ""Value"",
                    ""id"": ""90ca475d-6aab-4ab3-b77d-7adec4d0d182"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2115039a-3490-43b6-9eec-42bb8d03a878"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RaiseLift"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""11c9e779-a017-41db-a3b5-e9820c52b1c8"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LowerLift"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""110c8ca4-e83f-4c1e-a135-7b0e140d8976"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Brake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""9b94cbfb-ce41-4727-8cb0-15e76de9c45c"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""d9f9c310-6f1f-4f52-b3b1-be1cacf91155"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""926602b9-06c6-4d7f-8743-821357e40528"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""69a7d356-bb4c-4c54-869d-a7cf7e82e023"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""19d154d0-2e13-408b-9024-4c947a3dc8ea"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""f52d3d03-b91c-4b66-9a1e-a0519bc163d2"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""0c881119-ec64-47e4-a053-9ba8fafdc736"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LookInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Forklift
        m_Forklift = asset.FindActionMap("Forklift", throwIfNotFound: true);
        m_Forklift_Move = m_Forklift.FindAction("Move", throwIfNotFound: true);
        m_Forklift_Turn = m_Forklift.FindAction("Turn", throwIfNotFound: true);
        m_Forklift_RaiseLift = m_Forklift.FindAction("RaiseLift", throwIfNotFound: true);
        m_Forklift_LowerLift = m_Forklift.FindAction("LowerLift", throwIfNotFound: true);
        m_Forklift_Brake = m_Forklift.FindAction("Brake", throwIfNotFound: true);
        m_Forklift_LookInput = m_Forklift.FindAction("LookInput", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Forklift
    private readonly InputActionMap m_Forklift;
    private IForkliftActions m_ForkliftActionsCallbackInterface;
    private readonly InputAction m_Forklift_Move;
    private readonly InputAction m_Forklift_Turn;
    private readonly InputAction m_Forklift_RaiseLift;
    private readonly InputAction m_Forklift_LowerLift;
    private readonly InputAction m_Forklift_Brake;
    private readonly InputAction m_Forklift_LookInput;
    public struct ForkliftActions
    {
        private @ForkliftInput m_Wrapper;
        public ForkliftActions(@ForkliftInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Forklift_Move;
        public InputAction @Turn => m_Wrapper.m_Forklift_Turn;
        public InputAction @RaiseLift => m_Wrapper.m_Forklift_RaiseLift;
        public InputAction @LowerLift => m_Wrapper.m_Forklift_LowerLift;
        public InputAction @Brake => m_Wrapper.m_Forklift_Brake;
        public InputAction @LookInput => m_Wrapper.m_Forklift_LookInput;
        public InputActionMap Get() { return m_Wrapper.m_Forklift; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ForkliftActions set) { return set.Get(); }
        public void SetCallbacks(IForkliftActions instance)
        {
            if (m_Wrapper.m_ForkliftActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_ForkliftActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_ForkliftActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_ForkliftActionsCallbackInterface.OnMove;
                @Turn.started -= m_Wrapper.m_ForkliftActionsCallbackInterface.OnTurn;
                @Turn.performed -= m_Wrapper.m_ForkliftActionsCallbackInterface.OnTurn;
                @Turn.canceled -= m_Wrapper.m_ForkliftActionsCallbackInterface.OnTurn;
                @RaiseLift.started -= m_Wrapper.m_ForkliftActionsCallbackInterface.OnRaiseLift;
                @RaiseLift.performed -= m_Wrapper.m_ForkliftActionsCallbackInterface.OnRaiseLift;
                @RaiseLift.canceled -= m_Wrapper.m_ForkliftActionsCallbackInterface.OnRaiseLift;
                @LowerLift.started -= m_Wrapper.m_ForkliftActionsCallbackInterface.OnLowerLift;
                @LowerLift.performed -= m_Wrapper.m_ForkliftActionsCallbackInterface.OnLowerLift;
                @LowerLift.canceled -= m_Wrapper.m_ForkliftActionsCallbackInterface.OnLowerLift;
                @Brake.started -= m_Wrapper.m_ForkliftActionsCallbackInterface.OnBrake;
                @Brake.performed -= m_Wrapper.m_ForkliftActionsCallbackInterface.OnBrake;
                @Brake.canceled -= m_Wrapper.m_ForkliftActionsCallbackInterface.OnBrake;
                @LookInput.started -= m_Wrapper.m_ForkliftActionsCallbackInterface.OnLookInput;
                @LookInput.performed -= m_Wrapper.m_ForkliftActionsCallbackInterface.OnLookInput;
                @LookInput.canceled -= m_Wrapper.m_ForkliftActionsCallbackInterface.OnLookInput;
            }
            m_Wrapper.m_ForkliftActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Turn.started += instance.OnTurn;
                @Turn.performed += instance.OnTurn;
                @Turn.canceled += instance.OnTurn;
                @RaiseLift.started += instance.OnRaiseLift;
                @RaiseLift.performed += instance.OnRaiseLift;
                @RaiseLift.canceled += instance.OnRaiseLift;
                @LowerLift.started += instance.OnLowerLift;
                @LowerLift.performed += instance.OnLowerLift;
                @LowerLift.canceled += instance.OnLowerLift;
                @Brake.started += instance.OnBrake;
                @Brake.performed += instance.OnBrake;
                @Brake.canceled += instance.OnBrake;
                @LookInput.started += instance.OnLookInput;
                @LookInput.performed += instance.OnLookInput;
                @LookInput.canceled += instance.OnLookInput;
            }
        }
    }
    public ForkliftActions @Forklift => new ForkliftActions(this);
    public interface IForkliftActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnTurn(InputAction.CallbackContext context);
        void OnRaiseLift(InputAction.CallbackContext context);
        void OnLowerLift(InputAction.CallbackContext context);
        void OnBrake(InputAction.CallbackContext context);
        void OnLookInput(InputAction.CallbackContext context);
    }
}
